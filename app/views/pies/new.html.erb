<%
# Fabricated data for wizard - this simulates database objects
fake_pie_class = Struct.new(:id, :name, :slices) do
  def initialize(id, name)
    super(id, name, [])
  end
end

fake_slice_class = Struct.new(:id, :name, :color, :percentage, :elements) do
  def initialize(id, name, color, percentage)
    super(id, name, color, percentage, [])
  end
  
  def any?
    elements.any?
  end
end

fake_element_class = Struct.new(:id, :name, :objective, :completed) do
  def initialize(id, name, objective = nil, completed = false)
    super(id, name, objective, completed)
  end
  
  def completed?
    completed
  end
end

# Create available categories with dummy data
@available_categories = [
  fake_slice_class.new(1, "Health", "#ff6b6b", 45).tap do |slice|
    slice.elements = [
      fake_element_class.new(1, "Exercise 30 min daily", "Complete a 30-minute workout routine every day", false),
      fake_element_class.new(2, "Drink 8 glasses of water", "Consume at least 64 ounces of water daily", true),
      fake_element_class.new(3, "Get 8 hours of sleep", "Maintain consistent sleep schedule with 8 hours nightly", false),
      fake_element_class.new(4, "Eat 5 servings vegetables", "Include 5 servings of vegetables in daily meals", true),
      fake_element_class.new(5, "Stretch in the morning", "Perform a 10-minute stretching routine every morning", true),
      fake_element_class.new(6, "Take a daily walk", "Go for a 20-minute walk outdoors every day", false),
      fake_element_class.new(7, "Limit sugar intake", "Reduce daily sugar consumption to less than 25 grams", false),
      fake_element_class.new(8, "Practice yoga weekly", "Attend a yoga session once a week to improve flexibility", true)
    ]
  end,
  
  fake_slice_class.new(2, "Friends and Family", "#253da7ff", 60).tap do |slice|
    slice.elements = [
      fake_element_class.new(9, "Call family weekly", "Schedule regular weekly calls with family members", true),
      fake_element_class.new(10, "Date night monthly", "Plan monthly date activities with partner", false),
      fake_element_class.new(11, "Friend meetup bi-weekly", "Organize social gatherings with friends every two weeks", true),
      fake_element_class.new(12, "Send birthday cards", "Send personalized birthday cards to close friends and family", true),
      fake_element_class.new(13, "Volunteer together", "Participate in a community service activity with friends or family", false),
      fake_element_class.new(14, "Plan a family game night", "Organize a fun game night with family members", true),
      fake_element_class.new(15, "Reconnect with an old friend", "Reach out to an old friend and catch up", false)
    ]
  end,
  
  fake_slice_class.new(3, "Career", "#4d3d78ff", 30).tap do |slice|
    slice.elements = [
      fake_element_class.new(16, "Learn new skill", "Complete online course in relevant professional skill", false),
      fake_element_class.new(17, "Network monthly", "Attend one networking event per month", true),
      fake_element_class.new(18, "Update resume", "Revise and modernize resume with recent accomplishments", false),
      fake_element_class.new(19, "Seek mentorship", "Connect with industry mentor for career guidance", false),
      fake_element_class.new(20, "Improve public speaking", "Join a public speaking group to enhance skills", false),
      fake_element_class.new(21, "Attend industry conference", "Participate in an annual industry event", true),
      fake_element_class.new(22, "Build portfolio", "Create a portfolio showcasing your work", false),
      fake_element_class.new(23, "Set career goals", "Define short-term and long-term career objectives", false),
      fake_element_class.new(24, "Learn coding", "Complete a coding bootcamp or course", false),
      fake_element_class.new(25, "Write a blog", "Start a professional blog to share insights", true)
    ]
  end,
  
  fake_slice_class.new(4, "Hobbies and Interests", "#f7dc6f", 80).tap do |slice|
    slice.elements = [
      fake_element_class.new(26, "Photography Project", "Complete a monthly photography challenge", true),
      fake_element_class.new(27, "Learn Guitar", "Practice guitar for 30 minutes daily", true),
      fake_element_class.new(28, "Gardening", "Spend time tending to your garden weekly", false),
      fake_element_class.new(29, "Cooking new recipes", "Experiment with a new recipe every week", true),
      fake_element_class.new(30, "Join a book club", "Participate in discussions about books", true),
      fake_element_class.new(31, "Start painting", "Create a painting every month", true),
      fake_element_class.new(32, "Explore hiking trails", "Visit a new hiking trail every weekend", true),
      fake_element_class.new(33, "Learn a new language", "Dedicate time to learning a foreign language", false),
      fake_element_class.new(34, "Play board games", "Host a board game night with friends", true),
      fake_element_class.new(35, "Try pottery", "Attend a pottery class to create something unique", false)
    ]
  end,
  
  fake_slice_class.new(5, "Financial Health", "#bb8fce", 38).tap do |slice|
    slice.elements = [
      fake_element_class.new(36, "Budget tracking", "Review and update monthly budget", true),
      fake_element_class.new(37, "Emergency fund", "Save $500 monthly for emergency fund", false),
      fake_element_class.new(38, "Investment research", "Research and evaluate investment options", false),
      fake_element_class.new(39, "Track expenses", "Record daily expenses to identify spending patterns", true),
      fake_element_class.new(40, "Pay off debt", "Focus on reducing credit card debt", false),
      fake_element_class.new(41, "Increase savings", "Set aside 20% of income for savings", true),
      fake_element_class.new(42, "Review insurance policies", "Ensure adequate coverage for health and assets", false),
      fake_element_class.new(43, "Plan for retirement", "Contribute to a retirement fund regularly", false),
      fake_element_class.new(44, "Cut unnecessary expenses", "Identify and eliminate wasteful spending", true),
      fake_element_class.new(45, "Start a side hustle", "Generate additional income through a side project", false)
    ]
  end,
  
  fake_slice_class.new(6, "Self Development", "#43b845ff", 59).tap do |slice|
    slice.elements = [
      fake_element_class.new(46, "Mud Track Racing", "Get down and dirty!", true),
      fake_element_class.new(47, "Engine Building", "Build and customize your own engine", false),
      fake_element_class.new(48, "Local Exploration", "Research and explore local attractions", true),
      fake_element_class.new(49, "Meditation practice", "Spend 10 minutes daily meditating", true),
      fake_element_class.new(50, "Read self-help books", "Complete one self-help book per month", false),
      fake_element_class.new(51, "Take online courses", "Enroll in courses to learn new skills", true),
      fake_element_class.new(52, "Write a journal", "Reflect on daily experiences in a journal", true),
      fake_element_class.new(53, "Attend personal growth workshops", "Participate in seminars for self-improvement", false),
      fake_element_class.new(54, "Practice gratitude", "Write down three things you're grateful for daily", true),
      fake_element_class.new(55, "Learn public speaking", "Join a Toastmasters group to improve speaking skills", false)
    ]
  end,
  
  fake_slice_class.new(7, "Physical Environment", "#cd4ecbff", 60).tap do |slice|
    slice.elements = [
      fake_element_class.new(66, "Declutter living space", "Organize and remove unnecessary items from your home", true),
      fake_element_class.new(67, "Create a cozy reading nook", "Set up a comfortable space for reading and relaxation", true),
      fake_element_class.new(68, "Incorporate plants", "Add indoor plants to improve air quality and aesthetics", false),
      fake_element_class.new(69, "Enhance lighting", "Upgrade lighting fixtures for better ambiance", true),
      fake_element_class.new(70, "Reorganize furniture", "Arrange furniture to optimize space and functionality", true)
    ]
  end,
  
  fake_slice_class.new(8, "Personal Growth", "#ff9f43", 50).tap do |slice|
    slice.elements = [
      fake_element_class.new(76, "Read self-improvement book", "Complete a book on personal development", true),
      fake_element_class.new(77, "Practice mindfulness", "Spend 10 minutes daily on mindfulness exercises", true),
      fake_element_class.new(78, "Set personal goals", "Define and track progress on personal growth goals", false),
      fake_element_class.new(79, "Attend a workshop", "Participate in a personal growth workshop or seminar", false),
      fake_element_class.new(80, "Develop a new habit", "Focus on building a positive habit for 30 days", true),
      fake_element_class.new(81, "Write a gratitude journal", "List three things you're grateful for daily", true),
      fake_element_class.new(82, "Learn a new skill", "Dedicate time to learning a new skill or hobby", false),
      fake_element_class.new(83, "Seek feedback", "Ask for constructive feedback from a mentor or peer", false)
    ]
  end,
  
  fake_slice_class.new(9, "Spirituality", "#6a89cc", 40).tap do |slice|
    slice.elements = [
      fake_element_class.new(85, "Attend spiritual gathering", "Participate in a weekly spiritual or religious event", false),
      fake_element_class.new(86, "Reflect on values", "Journal about personal values and their meaning", false),
      fake_element_class.new(87, "Read spiritual texts", "Read a chapter from a spiritual or religious book", true),
      fake_element_class.new(88, "Practice gratitude", "Express gratitude for three things daily", true),
      fake_element_class.new(89, "Connect with nature", "Spend time outdoors to feel connected to the world", false),
      fake_element_class.new(90, "Volunteer for a cause", "Help a cause that aligns with your spiritual values", false),
      fake_element_class.new(91, "Create a vision board", "Visualize your spiritual goals and aspirations", false)
    ]
  end,
  
  fake_slice_class.new(10, "Community", "#78e08f", 35).tap do |slice|
    slice.elements = [
      fake_element_class.new(92, "Volunteer monthly", "Contribute time to a local charity or cause", false),
      fake_element_class.new(93, "Join a civic group", "Participate in a community or civic organization", false),
      fake_element_class.new(94, "Organize a neighborhood event", "Plan a gathering to connect with neighbors", true),
      fake_element_class.new(95, "Support a local business", "Shop or promote a small local business", true),
      fake_element_class.new(96, "Attend town meetings", "Participate in local government or town hall meetings", false),
      fake_element_class.new(97, "Mentor someone", "Offer guidance to someone in your community", true),
      fake_element_class.new(98, "Clean a public space", "Organize or join a cleanup event for a park or street", false),
      fake_element_class.new(99, "Donate to a cause", "Contribute to a charity or community project", false)
    ]
  end,
  
  fake_slice_class.new(11, "Creativity", "#e55039", 70).tap do |slice|
    slice.elements = [
      fake_element_class.new(100, "Paint weekly", "Create a new painting or artwork each week", true),
      fake_element_class.new(101, "Write a poem", "Compose a poem or short story", true),
      fake_element_class.new(102, "Learn a new instrument", "Dedicate time to learning a musical instrument", false),
      fake_element_class.new(103, "Design a craft project", "Complete a DIY craft project", true),
      fake_element_class.new(104, "Take a photography walk", "Capture creative photos during a walk", true),
      fake_element_class.new(105, "Experiment with cooking", "Try creating a new recipe or dish", true),
      fake_element_class.new(106, "Join an art class", "Enroll in a class to improve your artistic skills", true),
      fake_element_class.new(107, "Write a screenplay", "Draft a short screenplay or script", false)
    ]
  end,
  
  fake_slice_class.new(12, "Time Management", "#60a3bc", 55).tap do |slice|
    slice.elements = [
      fake_element_class.new(108, "Plan daily schedule", "Create a daily plan to organize tasks", true),
      fake_element_class.new(109, "Limit distractions", "Identify and reduce time-wasting activities", false),
      fake_element_class.new(110, "Review weekly goals", "Evaluate progress on weekly objectives", true),
      fake_element_class.new(111, "Use a time tracker", "Track how you spend your time daily", false),
      fake_element_class.new(112, "Prioritize tasks", "Use a priority matrix to organize tasks", true),
      fake_element_class.new(113, "Set time limits", "Allocate specific time blocks for tasks", true),
      fake_element_class.new(114, "Delegate tasks", "Assign tasks to others when possible", false),
      fake_element_class.new(115, "Take regular breaks", "Incorporate short breaks into your work schedule", true)
    ]
  end,
  
  fake_slice_class.new(13, "Parenting", "#fa983a", 65).tap do |slice|
    slice.elements = [
      fake_element_class.new(116, "Help with homework", "Assist children with their school assignments", true),
      fake_element_class.new(117, "Plan family outings", "Organize fun and educational activities for the family", false),
      fake_element_class.new(118, "Have one-on-one time", "Spend quality time individually with each child", true),
      fake_element_class.new(119, "Read bedtime stories", "Read a story to your children before bed", true),
      fake_element_class.new(120, "Teach life skills", "Help children learn essential life skills", false),
      fake_element_class.new(121, "Attend school events", "Participate in your children's school activities", true),
      fake_element_class.new(122, "Create a family tradition", "Start a new family tradition or ritual", true),
      fake_element_class.new(123, "Encourage hobbies", "Support your children in pursuing their interests", true)
    ]
  end
]
%>

<style>


/* Base Styles */
body {
  margin: 0;
  padding-left: 64px;
  font-family: var(--font-family-primary);
  background: white;
}

/* Wizard Container */
.wizard-container {
  max-width: 800px;
  margin: 0 auto;
  /* padding: 40px 20px; */
  text-align: center;
}

.wizard-step {
  display: none;
}

.wizard-step.active {
  display: inline-block;
}

/* Step Headers */
.step-header {
  background-color: #ffffc6ff;
  padding: 20px 0px;
  margin-bottom: 30px;
  border-radius: 18px;
  max-height: 150px;
  overflow: hidden;
}
/* Step Headers */
.step-header h1 {
  /* font-size: 2.5rem; */
  color: #333;
  margin: 0px 0;
  font-weight: var(--font-weight-light);
}

/* Step Headers */
/*RESTYLE OR DELETE - DTM */
/*RESTYLE OR DELETE - DTM */
/*RESTYLE OR DELETE - DTM */
.step-description {
 
  font-size: 1.2rem;
  color: #666;
  margin-bottom: 40px;
  line-height: 1.5;
}

/* Pie Name */
.pie-name-display {
  /* font-size: 2rem; */
  color: #333;
  /* font-weight: 400; */
  margin: 20px 0;
  cursor: text;
  border: 2px solid transparent;
  border-radius: 8px;
  padding: 8px 12px;
  transition: all 0.2s ease;
  outline: none;
  min-height: 1.2em;
}

.pie-name-display:hover {
  border-color: #ddd;
  background-color: #f9f9f9;
}

.pie-name-display:focus {
  border-color: var(--focus);
  background-color: white;
  box-shadow: 0 0 0 2px rgba(0, 124, 186, 0.1);
}

.pie-name-display:empty:before {
  content: attr(data-placeholder);
  color: #999;
  font-style: italic;
}

/* Form Elements */
.pie-name-input {
  font-size: 1.5rem;
  padding: 15px 20px;
  border: 1px solid #ddd;
  border-radius: 8px;
  width: 300px;
  max-width: 100%;
  text-align: center;
  transition: border-color 0.2s ease;
}

.pie-name-input:focus {
  outline: none;
  border-color: var(--focus);
}

.pie-name-input.invalid {
  border-color: #ddd;
}

/* Pie Name Container and Tooltip */
.pie-name-container {
  display: flex;
  align-items: center;
  justify-content: center;
  margin-bottom: 30px;
}

.pie-name-input-wrapper {
  position: relative;
}












/* tool tips */
/* SPECIFICS */
/*  TO THIS */
/*  -PAGE-  */

.pie-name-tooltip {
  width: 200px;
  max-width: 250px;
  position: absolute;
  right: 100%;
  top: 50%;
  transform: translateY(-50%);
}

/* Category Tooltip */
.category-tooltip {
  max-width: 250px;
  position: absolute;
  right: 100%;
  top: 135px;
  transform: translateY(-50%);
  margin-right: 15px;
}

/* SLIDER Tooltip */
.slider-tooltip {
  max-width: 250px;
  position: absolute;
  right: 100%;
  top: 163px;
  transform: translateY(-50%);
  margin-right: 15px;
}

/* SLIDER Tooltip */
.objectives-tooltip {
  font-size: 0.9rem;
  max-width: 250px;
  position: absolute;
  right: 100%;
  top: 82px;
  transform: translateY(-50%);
  margin-right: 15px;
  z-index: 1000;
}



















/* Category Selection */
.categories-grid {
  display: inline-block;
  max-width: 350px;
  margin: 0 auto 40px;
  text-align: left;
  opacity: 0;
  transform: translateY(-20px);
  transition: all 0.5s ease;
}

.categories-grid.slide-down {
  opacity: 1;
  transform: translateY(0);
}

.categories-progressive-container {
  display: block;
  position: relative;
  width: fit-content;

}

.category-item {
  display: flex;
  align-items: center;
  /* padding: 12px 16px; */
  /* border: 2px solid #e9ecef; */
  /* border-radius: 8px; */
  cursor: pointer;
  transition: all 0.2s ease;
}

.category-item:hover {
  border-color: #007cba;
  background: #f8f9fa;
}

.category-item.selected {
  /* border-color: #007cba; */
  /* background: #e7f3ff; */
}

.category-checkbox {
  margin-right: 12px;
  width: 18px;
  height: 18px;
}

.category-label {
  /* font-weight: var(--font-weight-medium); */
  color: #333;
  flex: 1;
  transform: translateX(0);
  transition: transform 0.6s ease;
}

.category-label.slide-left {
  transform: translateX(-30px);
}

/* Progressive Category Design */
.category-item-progressive {
  border: 1px solid #transparent;
  border-radius: var(--text-input-border-radius);
  transition: all 0.3s ease;
}

.category-item-progressive:hover {
  /* border-color: #007cba; */
  /* background: #f8f9fa; */
}

.category-item-progressive.selected {
  /* border-color: #007cba; */
  /* background: #e7f3ff; */
}

/* Checkbox container - visible in step 2 */
.category-checkbox-container {
  display: flex;
  align-items: center;
  opacity: 1;
  transition: opacity 0.3s ease;
  position: relative;
}

.category-checkbox-container.fade-out {
  opacity: 0;
}

.category-checkbox-container.hidden {
  display: none;
}

/* Slider elements - hidden in step 2, visible in step 3+ */
.slice-percentage {
  /* display: none; */
  opacity: 0;
  transition: opacity 0.95s ease;
}

.slice-percentage.fade-in {
  opacity: 1;
}

.slider-container {
  display: none;
  max-height: 0;
  overflow: hidden;
  opacity: 0;
  transform: translateY(-10px);
  transition: all 0.95s ease;
}

.slider-container.preparing {
  display: block;
  /* Still invisible but in DOM for animation setup */
}

.slider-container.slide-down {
  display: block;
  max-height: 60px;
  opacity: 1;
  transform: translateY(0);
}

/* Checkbox fade-out animation for step transitions */
.category-checkbox {
  opacity: 1;
  transform: translateX(0);
  transition: opacity 0.6s ease, transform 0.6s ease;
}

.category-checkbox.slide-out {
  opacity: 0;
  /* transform: translateX(-30px); */
  pointer-events: none;
}

.category-checkbox.hidden {
  display: none;
}

/* Show slider elements when in progress mode */
.category-progress-container.slide-down .slice-percentage {
  display: block;
}

/* Note: .slider-container animation is handled by its own .slide-down class */

/* Progress container - shown in step 2 for checkbox, fully visible in step 3+ */
.category-progress-container {
  display: block;
  transition: all 0.84s ease;
}

.category-progress-container.slide-down {
  opacity: 1;
  max-height: 100px;
  display: block !important;
}

/* Elements container - hidden until step 4 */
.category-elements-container {
  opacity: 0;
  max-height: 0;
  overflow: hidden;
  transition: all 0.3s ease;
  margin-top: 10px;
}

.category-elements-container.slide-down {
  opacity: 1;
  max-height: 700px;
  display: block !important;
}

.category-elements-container .category-section {
  /* border: 1px solid #007cba; */
  margin-bottom: 0;
}

/* Make category items clickable in elements phase */
.category-item-progressive.elements-phase {
  cursor: pointer;
  border: 1px solid transparent;
  border-radius: var(--text-input-border-radius);
}

.category-item-progressive.elements-phase:hover {
  /* background: #f0f8ff; */
  transform: translateY(-1px);
  /* box-shadow: 0 2px 8px rgba(0, 124, 186, 0.15); */
  border-color: var(--focus);
}

/* Progress Sliders */
.progress-sliders {
  max-width: 350px;
  margin: 0 auto;
}

.slider-item {
  /* display: flex; */
  align-items: center;
  margin-bottom: 25px;
  text-align: center;
}

.slider-label {
  flex: 1;
  font-weight: var(--font-weight-medium);
  color: #333;
  /* margin-right: 20px; */
}

.slider-container {
  /* flex: 1; */
  /* width: 350px; */
}

.progress-slider {
  width: 100%;
  height: 8px;
  border-radius: 4px;
  background: #e9ecef;
  outline: none;
  -webkit-appearance: none;
}

.progress-slider::-webkit-slider-thumb {
  -webkit-appearance: none;
  width: 20px;
  height: 20px;
  border-radius: 50%;
  background: #007cba;
  cursor: pointer;
}

.slider-value {
  font-weight: 600;
  color: #007cba;
  margin-left: 15px;
  min-width: 40px;
}

/* Elements Selection */
.elements-section {
  max-width: 450px;
  margin: 0 auto;
}

/* Hidden Template */
template {
  display: none !important;
}

.category-section {
  margin-bottom: 5px;
  border: 1px solid #e9ecef;
  border-radius: var(--text-input-border-radius);
  overflow: hidden;
}

.category-header {
  display: flex;
  align-items: center;
  /* padding: 10px 20px; */
  background: #205a94ff;
  cursor: pointer;
  border-bottom: 1px solid #e9ecef;
}

.category-progress-bar {
  height: 6px;
  border-radius: 3px;
  margin-right: 15px;
  flex: 1;
  max-width: 100px;
}

.category-name {
  font-weight: var(--font-weight-semi-bold);
  color: #333;
  flex: 1;
  text-align: left;
}

.category-percentage {
  font-weight: var(--font-weight-semi-bold);
  color: #666;
  margin-left: 10px;
}

.expand-icon {
  margin-left: 10px;
  transition: transform 0.2s ease;
}

.category-section.expanded .expand-icon {
  transform: rotate(180deg);
}

.elements-list {
  padding: 0 15px;
  background: white;
  width: 100%;
  box-sizing: border-box;
  display: block;
  max-height: 0;
  opacity: 0;
  overflow: hidden;
  transition: all 0.4s ease;
}

.category-section.expanded .elements-list {
  max-height: 800px;
  opacity: 1;
}

.element-item {
  display: flex;
  align-items: center;
  padding: 8px 0;
  text-align: left;
  transition: all 0.3s ease;
  overflow: hidden;
}

.element-item.removing {
  opacity: 0;
  transform: translateX(-20px);
  height: 0;
  padding: 0;
  margin: 0;
}

.element-checkbox {
  margin-right: 12px;
  width: 16px;
  height: 16px;
}

.element-name {
  font-weight: var(--font-weight-medium);
  color: #333;
  flex: 1;
}

.element-delete {
  color: var(--lightergray);
  cursor: pointer;
  padding: 4px;
  border-radius: 50%;
  transition: all 0.2s ease;
  margin-left: 8px;
  font-size: 18px;
  display: flex;
  align-items: center;
  justify-content: center;
}

.element-delete:hover {
  /* background: #f8f9fa; */
  color: var(--red);
}

.element-objective {
  font-size: 0.9rem;
  color: var(--lightgray);
  margin-left: 28px;
  margin-top: 4px;
}

.custom-element-form {
  padding-left: 30px;
  display: flex;
  align-items: center;
  gap: 8px;
}

.custom-element-input {
  max-width: 225px;
  padding: 8px 12px;
  border: 1px solid #ddd;
  border-radius: 4px;
  flex: 1;
  font-size: 0.9rem;
}

.add-element-btn {
  background: #007cba;
  color: white;
  border: none;
  padding: 8px;
  border-radius: 50%;
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
  width: 32px;
  height: 32px;
  transition: all 0.2s ease;
}

.add-element-btn:hover {
  background: #005a87;
  transform: scale(1.1);
}

/* Final Review */
.pie-preview {
  display: flex;
  gap: 40px;
  max-width: 800px;
  margin: 0 auto;
  align-items: flex-start;
}

.pie-chart-container {
  flex: 1;
  text-align: center;
}

.pie-details {
  flex: 1;
  text-align: left;
}

.slice-summary {
  margin-bottom: 20px;
  padding: 15px;
  border: 1px solid #e9ecef;
  border-radius: 8px;
}

.slice-name {
  font-weight: var(--font-weight-semi-bold);
  color: #333;
  margin-bottom: 8px;
}

.slice-progress {
  height: 8px;
  border-radius: 4px;
  margin-bottom: 10px;
}

.slice-elements {
  font-size: 0.9rem;
  color: #666;
}

/* Navigation */
.wizard-navigation {
  display: flex;
  justify-content: center;
  align-items: center;
  /* margin-top: 40px;
  padding-top: 20px;
  border-top: 1px solid #e9ecef; */
}

.back-link {
  color: #666;
  text-decoration: none;
  font-size: 0.9rem;
}

.back-link:hover {
  color: #333;
  text-decoration: underline;
}

.nav-buttons {
  display: flex;
  gap: 15px;
}

.btn {
  padding: 12px 24px;
  border: none;
  border-radius: 6px;
  font-size: 1rem;
  font-weight: var(--font-weight-medium);
  cursor: pointer;
  transition: all 0.2s ease;
}

.btn-secondary {
  background: #6c757d;
  color: white;
}

.btn-secondary:hover {
  background: #545b62;
}

.btn-primary {
  background: #007cba;
  color: white;
}

.btn-primary:hover {
  background: #005a87;
}

.btn-success {
  background: #28a745;
  color: white;
}

.btn-success:hover {
  background: #1e7e34;
}

.btn:disabled {
  background: #e9ecef !important;
  color: #6c757d !important;
  cursor: not-allowed;
}

/* Step Indicator */
/* DELETE THIS OR RESTYLE IT - DTM */
/* DELETE THIS OR RESTYLE IT - DTM */
/* DELETE THIS OR RESTYLE IT - DTMÍ */
.step-indicator {
  opacity: 1;
 /* display: none; */
  text-align: center;
  margin-bottom: 20px;
  margin-top: 40px;
}

.step-number {
  font-size: 12px;
  font-weight: var(--font-weight-bold);
  color: #afafafff;
  margin-bottom: 10px;
}

.step-title {
  font-size: 10px;
  color: #989898ff;
  font-weight: var(--font-weight-medium);
}

/* Responsive */
@media (max-width: 768px) {
  body {
    padding-left: 0;
  }
  
  .wizard-container {
    /* padding: 20px 15px; */
  }
  
  .step-header h1 {
    font-size: 1.8rem;
  }
  
  .pie-preview {
    flex-direction: column;
  }
  
  .categories-grid {
    /* grid-template-columns: 1fr;
    gap: 12px; */
  }
  
  .category-item {
    padding: 15px 16px;
  }
  
  .slider-item {
    flex-direction: column;
    align-items: flex-start;
    gap: 10px;
  }
  
  .slider-container {
    max-width: 100%;
    width: 100%;
  }
  
  .progress-slider {
    height: 12px;
  }
  
  .progress-slider::-webkit-slider-thumb {
    width: 24px;
    height: 24px;
  }
  
  .wizard-navigation {
    flex-direction: column;
    gap: 15px;
  }
  
  .nav-buttons {
    width: 100%;
    justify-content: center;
  }
  
  .btn {
    padding: 15px 30px;
    font-size: 1.1rem;
  }
}


 .slice-header {
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding-bottom: 5px;
    margin-bottom: 0px;
    border: 1px solid transparent;
  }

  .slice-header-container {
    padding: 0 10px;
    margin-bottom: 0px;
    /* border: 1px solid transparent; */
    /* border-radius: var(--text-input-border-radius); */
    transition: all 0.2s ease;
  }
  
  /* Only apply hover and cursor effects in elements phase */
  .category-item-progressive.elements-phase .slice-header-container {
    cursor: pointer;
  }
  
  .category-item-progressive.elements-phase .slice-header-container:hover {
    /* background-color: #f0f8ff; */
  }
  
  .category-item-progressive.elements-phase .slice-header-container.expanded {
    /* background-color: #e7f3ff; */
    /* border-color: #007cba; */
  }
  .slice-percentage {
    font-size: 13px;
    font-weight: var(--font-weight-regular);
    color: var(--lightgray);
  }



.next-category-button-container {
  display: flex;
  justify-content: end;
  margin: 20px 0;
}




</style>

<div class="wizard-container">
  <!-- Persistent Pie Name Display - Always Visible -->
  <div class="pie-name-container">
    <div class="pie-name-input-wrapper">
      <div class="tooltip one pie-name-tooltip fade-in" >You can click to change the name at any time. </div>
      <h1 class="pie-name-display" id="pie-name-display" contenteditable="true" data-placeholder="My Life"><%= (current_user.firstname + "'s Big Life!") || 'My Life' %></h1>
    </div>
  </div>

  <!-- Step 1: Name Input -->
  <div class="wizard-step active" id="step-1">
    <!-- Step 1 content can be minimal or removed entirely -->
  </div>

  <!-- Step 2: Progressive Category Selection with Reveals -->
  <div class="wizard-step" id="step-2">
  
    <div class="categories-progressive-container">
      <!-- Categories Grid with Progressive Elements -->
      
      
      <div class="tooltip two category-tooltip DEFAULT" >Default HTML tooltip text</div>
      <div class="categories-grid">

      


        <% @available_categories.each do |category| %>
          <div class="category-item-progressive" data-category-id="<%= category.id %>">
            <!-- Progress Slider (hidden in step 2, visible in step 3+) -->
            <div class="category-progress-container">
              <div class="slice-header-container">
                <div class="slice-header">
                  <!-- Checkbox (visible in step 2, hidden in steps 3+) -->

                  
                  <div class="category-checkbox-container">
                    <input type="checkbox" class="category-checkbox" id="cat-<%= category.id %>" value="<%= category.id %>">
                    <label for="cat-<%= category.id %>" class="category-label">
                      <%= category.name %>
                    </label>
                  </div>
                  
                  <div class="slice-percentage">50%</div>
                </div>
                <div class="slider-container">
                  <input type="range" class="progress-slider" min="0" max="100" value="50" data-category-id="<%= category.id %>">
                </div>
              </div>
            </div>
            

            
            <!-- Elements Accordion (hidden until step 4) -->
            <div class="category-elements-container" >
              <div class="category-section">
                <div class="category-header" data-category-id="<%= category.id %>">

                </div>
                <div class="elements-list">
                  <% 
                    # Determine number of elements to show based on percentage
                    elements_to_show = category.percentage.even? ? 8 : 7
                    displayed_elements = category.elements.first(elements_to_show)
                    
                    # Calculate how many should be checked based on percentage
                    checked_count = (category.percentage.to_f / 100 * displayed_elements.length).round
                  %>
                  <% displayed_elements.each_with_index do |element, index| %>
                    <div class="element-item" data-element-id="<%= element.id %>">
                      <input type="checkbox" class="element-checkbox" id="elem-<%= element.id %>" value="<%= element.id %>" data-category-id="<%= category.id %>" data-original-completed="<%= element.completed? %>" <%= index < checked_count ? 'checked' : '' %>>
                      <label for="elem-<%= element.id %>" class="element-name"><%= element.name %></label>
                      <span class="element-delete material-icons" data-element-id="<%= element.id %>" data-category-id="<%= category.id %>" title="Remove element">cancel</span>
                    </div>
                  <% end %>
                  <div class="custom-element-form">
                    <input type="text" class="custom-element-input" placeholder="Add your own element..." data-category-id="<%= category.id %>">
                    <button class="add-element-btn" data-category-id="<%= category.id %>" title="Add Element">
                      <span class="material-symbols-outlined">add</span>
                    </button>
                  </div>

                  <div class="next-category-button-container">
                    <button class="mini-next btn" data-category-id="<%= category.id %>" title="Add Element">
                      Next area...
                    </button>
                  </div>



                </div>
              </div>
            </div>
          </div>
        <% end %>
      </div>
    </div>
    
    

  </div>
</div>

<div class="wizard-navigation">
  <div class="nav-buttons" id="nav-buttons">
    <button class="btn btn-secondary" id="step2-back">Back</button>
    <button class="btn btn-primary" id="step2-next" disabled>Next Step...</button>
  </div>
</div>

    <div class="step-indicator" id="step-indicator">
      <div class="step-number">1 of 4</div>
      <div class="step-title">Edit the name, or just click 'Next'</div>
    </div>
    
    
    <!-- Hidden Template for Custom Elements (to avoid HTML injection) -->
<template id="custom-element-template">
  <div class="element-item custom-element-item">
    <input type="checkbox" class="element-checkbox custom-element" checked>
    <label class="element-name"></label>
    <span class="element-delete material-icons" title="Remove element">cancel</span>
  </div>
</template>

















<script>
// Available categories data
const availableCategories = <%= raw @available_categories.map { |category| 
  {
    id: category.id,
    name: category.name,
    color: category.color,
    defaultPercentage: category.percentage,
    elements: category.elements.map { |element|
      {
        id: element.id,
        name: element.name,
        objective: element.objective,
        completed: element.completed?
      }
    }
  }
}.to_json %>;

// Wizard state
let wizardData = {
  pieName: '',
  selectedCategories: [],
  categoryProgress: {},
  selectedElements: {},
  customElements: {}
};

// Current step and substep tracking
let currentStep = 1;
let currentSubStep = 'categories'; // 'categories', 'progress', 'elements'

// Helper function to update step indicator without HTML injection
function updateStepIndicator(stepNumber, title) {
  const stepIndicator = document.getElementById('step-indicator');
  if (stepIndicator) {
    const stepNumberEl = stepIndicator.querySelector('.step-number');
    const stepTitleEl = stepIndicator.querySelector('.step-title');
    
    if (stepNumberEl) {
      stepNumberEl.textContent = `Step ${stepNumber} of 4`;
    }
    if (stepTitleEl) {
      stepTitleEl.innerHTML = title;
    }
  }
}

// Helper function to update navigation buttons without HTML injection
function updateNavigationButtons(phase) {
  const navButtons = document.getElementById('nav-buttons');
  if (!navButtons) return;
  
  // Clear existing buttons
  navButtons.innerHTML = '';
  
  // Create new buttons based on phase
  if (phase === 'step1') {
    const nextBtn = document.createElement('button');
    nextBtn.className = 'btn btn-primary';
    nextBtn.id = 'step1-next';
    nextBtn.textContent = 'Next Step';
    nextBtn.disabled = false;  // Start enabled for step1
    
    navButtons.appendChild(nextBtn);
  } else if (phase === 'elements') {
    const backBtn = document.createElement('button');
    backBtn.className = 'btn btn-secondary';
    backBtn.id = 'elements-back';
    backBtn.textContent = 'Back';
    
    const saveBtn = document.createElement('button');
    saveBtn.className = 'btn btn-success';
    saveBtn.id = 'elements-save';
    saveBtn.textContent = 'Save!';
    
    navButtons.appendChild(backBtn);
    navButtons.appendChild(saveBtn);
  } else if (phase === 'progress') {
    const backBtn = document.createElement('button');
    backBtn.className = 'btn btn-secondary';
    backBtn.id = 'step2-back';
    backBtn.textContent = 'Back';
    
    const nextBtn = document.createElement('button');
    nextBtn.className = 'btn btn-primary';
    nextBtn.id = 'step2-next';
    nextBtn.textContent = 'Next';
    
    navButtons.appendChild(backBtn);
    navButtons.appendChild(nextBtn);
  }
}




// Helper function to set up elements navigation handlers
function setupElementsNavigation() {
  const elementsBackBtn = document.getElementById('elements-back');
  const elementsSaveBtn = document.getElementById('elements-save');
  
  if (elementsBackBtn) {
    elementsBackBtn.addEventListener('click', () => {
      currentSubStep = 'progress';
      
      // Call the function to hide elements and show progress
      hideElementsSections();
      
      // Then reinitialize step 2 with progress substep
      setTimeout(() => {
        initializeStep2();
      }, 100);
    });
  }
  
  if (elementsSaveBtn) {
    elementsSaveBtn.addEventListener('click', () => {
      savePie();
    });
  }
}



// Initialize wizard
document.addEventListener('DOMContentLoaded', function() {
  initializeStep1();
  
  // Add keyboard navigation
  document.addEventListener('keydown', function(e) {
    if (e.key === 'Enter' && !e.shiftKey) {
      // Don't trigger if user is editing the pie name or in a text input
      if (document.activeElement.tagName === 'TEXTAREA' || 
          document.activeElement.contentEditable === 'true' ||
          document.activeElement.tagName === 'INPUT') {
        return;
      }
      
      // Find the active next step button
      const nextBtn = document.getElementById('step1-next') || 
                     document.getElementById('step2-next') || 
                     document.getElementById('elements-save');
      
      if (nextBtn && !nextBtn.disabled) {
        e.preventDefault();
        nextBtn.click();
      }
    }
  });
});

// Also initialize immediately if DOM is already ready
if (document.readyState !== 'loading') {
  initializeStep1();
}









// First page load, initializing everything, waiting on first click. 
// First page load, initializing everything, waiting on first click. 
// First page load, initializing everything, waiting on first click. 
function initializeStep1() {
  const nameDisplay = document.getElementById('pie-name-display');
  
  // Create navigation for Step 1
  updateNavigationButtons('step1');
  const nextBtn = document.getElementById('step1-next');
  
  if (!nextBtn) {
    return;
  }
  
  // Get the pie name from the display element and set it in wizard data
  if (nameDisplay) {
    wizardData.pieName = nameDisplay.textContent.trim();
    
    // Add inline editing functionality
    setupInlineEditing(nameDisplay);
  }
  
  // Always enable the Next button since we're using a pre-set name
  nextBtn.disabled = false;
  nextBtn.removeAttribute('disabled');
  
  nextBtn.addEventListener('click', function(e) {
    e.preventDefault();
    
    // Fade out the pie name tooltip
    const pieNameTooltip = document.querySelector('.pie-name-tooltip');
    if (pieNameTooltip) {
      pieNameTooltip.classList.remove('fade-in');
      pieNameTooltip.style.opacity = '0';
    }
    
    // Update wizard data with current display text before proceeding
    if (nameDisplay) {
      wizardData.pieName = nameDisplay.textContent.trim();
    }
    goToStep(2);
  });

  // Hide the category tooltip initially
  const tooltip = document.querySelector('.category-tooltip');
  if (tooltip) {
    tooltip.style.opacity = 0;
  }
}

// Function to set up inline editing for the pie name
function setupInlineEditing(element) {
  // Update wizard data when content changes
  element.addEventListener('input', function() {
    wizardData.pieName = this.textContent.trim();
  });
  
  // Handle Enter key to finish editing
  element.addEventListener('keydown', function(e) {
    if (e.key === 'Enter') {
      e.preventDefault();
      this.blur(); // Remove focus to finish editing
    }
    // Prevent line breaks
    if (e.key === 'Enter' || e.key === 'Tab') {
      e.preventDefault();
    }
  });
  
  // Handle paste to prevent formatting
  element.addEventListener('paste', function(e) {
    e.preventDefault();
    const text = e.clipboardData.getData('text/plain');
    document.execCommand('insertText', false, text);
  });
  
  // Limit length and clean up on blur
  element.addEventListener('blur', function() {
    let text = this.textContent.trim();
    
    // Limit to 50 characters (same as original input)
    if (text.length > 50) {
      text = text.substring(0, 50);
      this.textContent = text;
    }
    
    // Ensure we have some content
    if (text === '') {
      this.textContent = this.getAttribute('data-placeholder') || 'My Life';
    }
    
    // Update wizard data
    wizardData.pieName = this.textContent.trim();
  });
  
  // Select all text when focused for easy editing
  element.addEventListener('focus', function() {
    // Select all text after a brief delay to ensure it works
    setTimeout(() => {
      const range = document.createRange();
      range.selectNodeContents(this);
      const selection = window.getSelection();
      selection.removeAllRanges();
      selection.addRange(range);
    }, 10);
  });
}













// Step 2, THE VERY FIRST THING THAT HAPPENS
// Step 2, THE VERY FIRST THING THAT HAPPENS
// Step 2, THE VERY FIRST THING THAT HAPPENS
function initializeCategorySelection() {
  
  // Update navigation buttons for categories phase
  updateNavigationButtons('progress');
  
  // Trigger slide-down animation for categories grid
  const categoriesGrid = document.querySelector('.categories-grid');
  if (categoriesGrid) {
    // Ensure the grid starts in hidden state, then animate in
    setTimeout(() => {
      categoriesGrid.classList.add('slide-down');
    }, 50);
  }
  
  const checkboxes = document.querySelectorAll('.category-checkbox');
  
  // Check first 8 categories by default
  checkboxes.forEach((checkbox, index) => {
    if (index < 8) {
      checkbox.checked = true;
      checkbox.closest('.category-item-progressive').classList.add('selected');
    }
  });
  
  updateSelectedCategories();
  
  // Add event listeners for checkboxes
  checkboxes.forEach(checkbox => {
    checkbox.addEventListener('change', function() {
      const item = this.closest('.category-item-progressive');
      if (this.checked) {
        item.classList.add('selected');
      } else {
        item.classList.remove('selected');
      }
      updateSelectedCategories();
    });
  });
  
  // Update step indicator
  updateStepIndicator(2, 'Choose the areas of life that mean the most to you.');
  
  // Set up navigation after buttons are created
  setTimeout(() => {
    setupProgressiveNavigation();
  }, 10);

          const tooltip = document.querySelector('.category-tooltip');
        // tooltip.style.opacity = 0; //hide it so it can fade in
        if (tooltip) {
          updateTooltip(tooltip, 'tooltip two category-tooltip fade-in', "Choose the areas of life that matter most to you.");
        };

// alert("This is step 2")

}


// Step 2.5, this ALSO happens when clickingon the first step button
// THis happens after subsequent steps also, not sure why. 
function initializeStep2() {
  // alert("initializeStep2 called. currentSubStep: " + currentSubStep);
  const checkboxes = document.querySelectorAll('.category-checkbox');
  const backBtn = document.getElementById('step2-back');
  const nextBtn = document.getElementById('step2-next');
  const nameDisplay = document.getElementById('pie-name-display');
  const stepIndicator = document.getElementById('step-indicator');
  const navButtons = document.getElementById('nav-buttons');
  
  // Initialize based on current substep
  switch(currentSubStep) {
    case 'categories':
      initializeCategorySelection();
      break;
    case 'progress':
      initializeProgressReveal();
      break;
    case 'elements':
      initializeElementsReveal();
      break;
    default:
      break;
  }

// alert("This is step 2.5")

}

















// STEP 3  - - - - 
// STEP 3  - - - - 
// STEP 3  - - - - 
// STEP 3  - - - - 
function initializeProgressReveal() {
  // Update navigation buttons for progress phase
  updateNavigationButtons('progress');
  
  // Fade out checkboxes and slide down progress sliders
  revealProgressSliders();
  
  // Update step indicator
  updateStepIndicator(3, 'Rate your fulfillment in each category using the sliders.');

      // update the tooltip
        const tooltip = document.querySelector('.category-tooltip');
        if (tooltip) {
          // Remove any inline opacity style to allow CSS animation to work
          tooltip.style.opacity = '';
          updateTooltip(tooltip, 'tooltip three slider-tooltip fade-in', "Step 3: Adjust the sliders to reflect your general satisfaction in each area. This is just a rough starting point... We'll get to the fun part next!");
        };

  // Set up navigation after buttons are created
  setTimeout(() => {
    setupProgressiveNavigation();
  }, 10);

  // alert("This is step 3")
}
















function initializeElementsReveal() {
  const navButtons = document.getElementById('nav-buttons');
  
  // Show elements sections and set up accordion behavior
  revealElementsSections();
  
  // Update navigation to show save button
  updateNavigationButtons('elements');

  // Update step indicator
  updateStepIndicator(4, 'What is working for you now, and what needs improvement?');

  // Set up new navigation handlers
  setupElementsNavigation();

        // update the tooltip
        const tooltip = document.querySelector('.slider-tooltip');
        if (tooltip) {
          // Remove any inline opacity style to allow CSS animation to work
          tooltip.style.opacity = '';
          updateTooltip(tooltip, 'tooltip four objectives-tooltip fade-in', "Check off things that are working for you. Uncheck things you want to improve. You can also add your own custom elements to track!");
        };

// alert("This is step 4")
}






  // create a function that changes the class and content of the tooltip
  function updateTooltip(tooltipElement, newClass, newContent) {
    // First hide the tooltip by removing fade-in class and setting opacity to 0
    tooltipElement.classList.remove('fade-in');
    tooltipElement.style.opacity = '0';
    
    // Wait for the fade-out to complete, then update content and trigger fade-in
    setTimeout(() => {
      // Update the class and content
      tooltipElement.className = newClass;
      tooltipElement.innerHTML = newContent; // Use innerHTML to support <br> tags
      
      // Remove inline opacity to allow CSS animation to work
      tooltipElement.style.opacity = '';
    }, 100); // Short delay to ensure fade-out is visible
  }

























function setupProgressiveNavigation() {
  const backBtn = document.getElementById('step2-back');
  const nextBtn = document.getElementById('step2-next');
  
  if (!backBtn || !nextBtn) {
    return;
  }
  
  // Remove existing listeners by cloning elements
  const newBackBtn = backBtn.cloneNode(true);
  const newNextBtn = nextBtn.cloneNode(true);
  backBtn.parentNode.replaceChild(newBackBtn, backBtn);
  nextBtn.parentNode.replaceChild(newNextBtn, nextBtn);
  
  // Add new listeners based on current substep
  newBackBtn.addEventListener('click', () => {
    if (currentSubStep === 'categories') {
      goToStep(1);
    } else if (currentSubStep === 'progress') {
      currentSubStep = 'categories';
      hideProgressSliders();
      initializeStep2();
    } else if (currentSubStep === 'elements') {
      currentSubStep = 'progress';
      hideElementsSections();
      initializeStep2();
    }
  });
  
  newNextBtn.addEventListener('click', () => {
    if (currentSubStep === 'categories' && wizardData.selectedCategories.length >= 3) {
      currentSubStep = 'progress';
      initializeStep2();
    } else if (currentSubStep === 'progress') {
      currentSubStep = 'elements';
      initializeStep2();
    }
  });
}

function updateSelectedCategories() {
  const checkboxes = document.querySelectorAll('.category-checkbox:checked');
  wizardData.selectedCategories = Array.from(checkboxes).map(cb => parseInt(cb.value));
  
  const nextBtn = document.getElementById('step2-next');
  const isValid = wizardData.selectedCategories.length >= 3;
  nextBtn.disabled = !isValid;
  
  // // Add visual feedback
  // const description = document.querySelector('#step-2 .step-description');
  // if (wizardData.selectedCategories.length === 0) {
  //   description.style.color = '#666';
  //   description.textContent = 'Choose at least 3 categories to create a meaningful life wheel.';
  // } else if (wizardData.selectedCategories.length < 3) {
  //   description.style.color = '#e74c3c';
  //   description.textContent = `Choose ${3 - wizardData.selectedCategories.length} more categories (${wizardData.selectedCategories.length} selected).`;
  // } else {
  //   description.style.color = '#28a745';
  //   description.textContent = `Perfect! ${wizardData.selectedCategories.length} categories selected.`;
  // }
  
  // Initialize progress for selected categories
  wizardData.selectedCategories.forEach(catId => {
    if (!(catId in wizardData.categoryProgress)) {
      const category = availableCategories.find(c => c.id === catId);
      wizardData.categoryProgress[catId] = category ? category.defaultPercentage : 50;
    }
  });
}

// Progressive Reveal Animation Functions
// Progressive Reveal Animation Functions
// Progressive Reveal Animation Functions
function revealProgressSliders() {
  // First, hide non-selected category items completely
  const allCategoryItems = document.querySelectorAll('.category-item-progressive');
  allCategoryItems.forEach(categoryItem => {
    const catId = parseInt(categoryItem.getAttribute('data-category-id'));
    if (!wizardData.selectedCategories.includes(catId)) {
      categoryItem.style.display = 'none';
    } else {
      categoryItem.style.display = 'block';
    }
  });
  
  // Only slide out checkboxes to the left (not the entire container or labels)
  const checkboxes = document.querySelectorAll('.category-checkbox');
  const labels = document.querySelectorAll('.category-label');
  
  checkboxes.forEach(checkbox => {
    checkbox.classList.add('slide-out');
  });
  
  // Slide labels left into the checkbox position at the same time
  labels.forEach(label => {
    label.classList.add('slide-left');
  });
  
  // Don't hide checkboxes - keep them in layout to prevent flexbox repositioning
  // The opacity: 0 from slide-out class is sufficient for visual hiding
  
  // After fade out, show progress sliders for selected categories
  setTimeout(() => {
    wizardData.selectedCategories.forEach(catId => {
      const categoryItem = document.querySelector(`[data-category-id="${catId}"]`);
      if (categoryItem) {
        const progressContainer = categoryItem.querySelector('.category-progress-container');
        const slider = progressContainer.querySelector('.progress-slider');
        const valueDisplay = progressContainer.querySelector('.slice-percentage');
        const category = availableCategories.find(c => c.id === catId);
        
        // Set initial values
        const initialValue = wizardData.categoryProgress[catId];
        slider.value = initialValue;
        valueDisplay.textContent = initialValue + '%';
        
        // Set slider track color
        if (category) {
          slider.style.background = `linear-gradient(to right, ${category.color} ${initialValue}%, #e9ecef ${initialValue}%)`;
        }
        
        // Add event listener for slider changes
        slider.addEventListener('input', function() {
          const value = parseInt(this.value);
          wizardData.categoryProgress[catId] = value;
          valueDisplay.textContent = value + '%';
          if (category) {
            this.style.background = `linear-gradient(to right, ${category.color} ${value}%, #e9ecef ${value}%)`;
          }
        });
        
        // Show the slice percentage and prepare slider container for animation
        // DON'T show percentage yet - keep it hidden until fade-in
        // valueDisplay.style.display = 'block';
        const sliderContainer = progressContainer.querySelector('.slider-container');
        
        // Step 1: Make slider container visible but still in "hidden" state
        sliderContainer.classList.add('preparing');
        
        // Step 2: Trigger slide-down animation after ensuring DOM is ready
        setTimeout(() => {
          sliderContainer.classList.remove('preparing');
          sliderContainer.classList.add('slide-down');
        }, 50);
        
        // Step 3: Show percentage display only after all animations are complete
        setTimeout(() => {
          valueDisplay.style.display = 'block'; // Show it right before fading in
          // Add a tiny delay to ensure display change is rendered
          setTimeout(() => {
            valueDisplay.classList.add('fade-in');
          }, 50);
        }, 800); // Even longer delay to ensure all animations complete
        
        // Animate reveal of progress container
        progressContainer.style.display = 'block';
        progressContainer.classList.add('slide-down');
      }
    });
  }, 600); // Increased to match the longer checkbox transition time
}










function hideProgressSliders() {
  // Reset header back to categories step // DTM commented out becauese we no longer have step-header and it might not get used
  // const stepHeader = document.querySelector('#step-2 .step-header h1');
  // stepHeader.textContent = 'Great! Now, choose the categories of life that are important to you...';
  
  // Reset categories grid animation state
  const categoriesGrid = document.querySelector('.categories-grid');
  if (categoriesGrid) {
    categoriesGrid.classList.remove('slide-down');
  }
  
  // Show all category items again (in case some were hidden)
  const allCategoryItems = document.querySelectorAll('.category-item-progressive');
  allCategoryItems.forEach(categoryItem => {
    categoryItem.style.display = 'block';
  });
  
  // Hide slice percentage and slider container
  const slicePercentages = document.querySelectorAll('.slice-percentage');
  const sliderContainers = document.querySelectorAll('.slider-container');
  slicePercentages.forEach(el => {
    el.style.display = 'none';
    el.classList.remove('fade-in'); // Reset fade-in state
  });
  sliderContainers.forEach(el => {
    el.classList.remove('slide-down', 'preparing');
    setTimeout(() => {
      el.style.display = 'none';
    }, 400); // Wait for animation to complete
  });
  
  // Hide progress sliders
  const progressContainers = document.querySelectorAll('.category-progress-container');
  progressContainers.forEach(container => {
    container.classList.remove('slide-down');
  });
  
  // Show checkboxes again (remove slide-out and hidden classes)
  const checkboxes = document.querySelectorAll('.category-checkbox');
  const labels = document.querySelectorAll('.category-label');
  
  checkboxes.forEach(checkbox => {
    checkbox.classList.remove('hidden', 'slide-out');
  });
  
  // Reset labels to original position
  labels.forEach(label => {
    label.classList.remove('slide-left');
  });
}













function revealElementsSections() {
  // Update step indicator instead of trying to find step-header
  // updateStepIndicator(4, 'Click on categories to expand and select elements to track.<br>When ready, click \'Save Pie\'');
  
  // Hide progress sliders since we'll show the category info in the accordion headers
  const progressContainers = document.querySelectorAll('.category-progress-container');
  progressContainers.forEach(container => {
    container.style.display = 'none';
  });
  
  // Show elements sections for selected categories with accordion behavior
  wizardData.selectedCategories.forEach(catId => {
    const categoryItem = document.querySelector(`.category-item-progressive[data-category-id="${catId}"]`);
    if (categoryItem) {
      const elementsContainer = categoryItem.querySelector('.category-elements-container');
      const category = availableCategories.find(c => c.id === catId);
      
      // Add elements-phase class to make it clear it's clickable
      categoryItem.classList.add('elements-phase');
      
      // Show the elements container
      if (elementsContainer) {
        elementsContainer.style.display = 'block';
        elementsContainer.classList.add('slide-down');
        
        // Make sure category section starts collapsed (elements list will be hidden via CSS)
        const categorySection = elementsContainer.querySelector('.category-section');
        if (categorySection) {
          categorySection.classList.remove('expanded');
        }
        
        // Set up element interactions (checkboxes, delete buttons, add button)
        setupElementInteractions(elementsContainer, catId);
        
        // Initialize percentage based on pre-checked elements
        updateCalculatedPercentage(catId);
      }
      
      // Set up click handler for accordion behavior
      const sliceHeaderContainer = categoryItem.querySelector('.slice-header');
      if (sliceHeaderContainer) {
        // Remove any existing listeners by cloning
        const newSliceHeaderContainer = sliceHeaderContainer.cloneNode(true);
        sliceHeaderContainer.parentNode.replaceChild(newSliceHeaderContainer, sliceHeaderContainer);
        
        newSliceHeaderContainer.addEventListener('click', function(e) {
          const currentElementsContainer = categoryItem.querySelector('.category-elements-container');
          const categorySection = currentElementsContainer.querySelector('.category-section');
          const elementsList = currentElementsContainer.querySelector('.elements-list');
          const isCurrentlyExpanded = categorySection && categorySection.classList.contains('expanded');
          
          // Close all other expanded sections first (accordion behavior)
          wizardData.selectedCategories.forEach(otherCatId => {
            if (otherCatId !== catId) {
              const otherCategoryItem = document.querySelector(`.category-item-progressive[data-category-id="${otherCatId}"]`);
              if (otherCategoryItem) {
                const otherElementsContainer = otherCategoryItem.querySelector('.category-elements-container');
                const otherCategorySection = otherElementsContainer.querySelector('.category-section');
                
                if (otherCategorySection && otherCategorySection.classList.contains('expanded')) {
                  otherCategorySection.classList.remove('expanded');
                }
              }
            }
          });
          
          // Toggle current section
          if (isCurrentlyExpanded) {
            categorySection.classList.remove('expanded');
          } else {
            categorySection.classList.add('expanded');
          }
        });
      }
    }
  });
  
  // Set up "Next area..." button functionality
  const nextCategoryButtons = document.querySelectorAll('.mini-next');
  nextCategoryButtons.forEach(button => {
    // Remove any existing listeners by cloning
    const newButton = button.cloneNode(true);
    button.parentNode.replaceChild(newButton, button);
    
    newButton.addEventListener('click', function(e) {
      e.preventDefault();
      e.stopPropagation(); // Prevent the accordion click from firing
      
      const currentCatId = parseInt(this.getAttribute('data-category-id'));
      const currentIndex = wizardData.selectedCategories.indexOf(currentCatId);
      
      // Close current expanded section
      const currentCategoryItem = document.querySelector(`.category-item-progressive[data-category-id="${currentCatId}"]`);
      if (currentCategoryItem) {
        const currentElementsContainer = currentCategoryItem.querySelector('.category-elements-container');
        const currentCategorySection = currentElementsContainer.querySelector('.category-section');
        
        if (currentCategorySection) {
          currentCategorySection.classList.remove('expanded');
        }
      }
      
      // Find next category (loop back to first if at end)
      const nextIndex = (currentIndex + 1) % wizardData.selectedCategories.length;
      const nextCatId = wizardData.selectedCategories[nextIndex];
      
      // Expand next category
      const nextCategoryItem = document.querySelector(`.category-item-progressive[data-category-id="${nextCatId}"]`);
      if (nextCategoryItem) {
        const nextElementsContainer = nextCategoryItem.querySelector('.category-elements-container');
        const nextCategorySection = nextElementsContainer.querySelector('.category-section');
        
        if (nextCategorySection) {
          nextCategorySection.classList.add('expanded');
          
          // Smooth scroll to the newly expanded section
          nextCategoryItem.scrollIntoView({ 
            behavior: 'smooth', 
            block: 'start' 
          });
        }
      }
    });
  });

  // Automatically expand the first category
  if (wizardData.selectedCategories.length > 0) {
    const firstCatId = wizardData.selectedCategories[0];
    const firstCategoryItem = document.querySelector(`.category-item-progressive[data-category-id="${firstCatId}"]`);
    if (firstCategoryItem) {
      const firstElementsContainer = firstCategoryItem.querySelector('.category-elements-container');
      const firstCategorySection = firstElementsContainer.querySelector('.category-section');
      
      if (firstCategorySection) {
        firstCategorySection.classList.add('expanded');
      }
    }
  }
}

function hideElementsSections() {
  // Update header back //DTM commented out because we no longer have step-header and it might not get used
  // const stepHeader = document.querySelector('#step-2 .step-header h1');
  // stepHeader.textContent = 'Perfect! Now, how complete would you rate your fulfillment in each category?';
  
  // Remove elements-phase class and reset clickable styling from category items
  const categoryItems = document.querySelectorAll('.category-item-progressive');
  categoryItems.forEach((item, index) => {
    item.classList.remove('elements-phase', 'expanded');
  });
  
  // Hide elements sections
  const elementsContainers = document.querySelectorAll('.category-elements-container');
  elementsContainers.forEach((container, index) => {
    container.classList.remove('slide-down');
    setTimeout(() => {
      container.style.display = 'none';
    }, 300);
  });
  
  // Show progress sliders again
  const progressContainers = document.querySelectorAll('.category-progress-container');
  progressContainers.forEach((container, index) => {
    container.style.display = 'block';
    container.classList.add('slide-down');
  });

  
  // Reset navigation buttons
  updateNavigationButtons('progress');
}

// REMOVED: Old initializeStep3() function that created HTML
// Now using progressive reveal with existing HTML structure

// REMOVED: Old initializeStep4() function that created HTML
// Now using progressive reveal with existing HTML structure

// Calculate actual percentages based on selected elements and their completion status
function calculateActualPercentages() {
  const percentages = {};
  
  wizardData.selectedCategories.forEach(catId => {
    const category = availableCategories.find(c => c.id === catId);
    if (!category) {
      percentages[catId] = 0;
      return;
    }
    
    const selectedElements = wizardData.selectedElements[catId] || [];
    const customElements = wizardData.customElements[catId] || [];
    
    // Calculate percentage based on ALL elements in the category (not just selected ones)
    const totalElementsInCategory = category.elements.length + customElements.length;
    const completedCount = selectedElements.length + customElements.length; // User checked elements + custom elements
    
    if (totalElementsInCategory === 0) {
      percentages[catId] = 0;
      return;
    }
    
    const calculatedPercentage = Math.round((completedCount / totalElementsInCategory) * 100);
    
    percentages[catId] = calculatedPercentage;
  });
  
  return percentages;
}

function savePie() {
  // Get the save button - could be from step 4 or step 5 (if we keep it)
  const saveBtn = document.getElementById('elements-save') || document.getElementById('step4-save') || document.getElementById('save-pie');
  
  if (!saveBtn) {
    return;
  }
  
  const originalText = saveBtn.textContent;
  
  // Show loading state
  saveBtn.disabled = true;
  saveBtn.textContent = 'Saving...';
  
  // Calculate actual percentages based on selected elements
  const calculatedPercentages = calculateActualPercentages();
  
  // Prepare data for submission
  const pieData = {
    pie: {
      name: wizardData.pieName,
      slices_attributes: wizardData.selectedCategories.map(catId => {
        const category = availableCategories.find(c => c.id === catId);
        if (!category) return null;
        
        const selectedElements = wizardData.selectedElements[catId] || [];
        const customElements = wizardData.customElements[catId] || [];
        
        // Save ALL elements that are actually displayed in the DOM for this category
        const categoryContainer = document.querySelector(`[data-category-id="${catId}"]`);
        const elementCheckboxes = categoryContainer ? categoryContainer.querySelectorAll('.element-checkbox') : [];
        
        const elementsAttributes = [];
        
        // Collect data from actual checkboxes in the DOM
        elementCheckboxes.forEach(checkbox => {
          const elementId = parseInt(checkbox.value);
          const elementName = checkbox.nextElementSibling ? checkbox.nextElementSibling.textContent.trim() : '';
          const elementItem = checkbox.closest('.element-item');
          
          // Skip if this is a custom element (we handle those separately)
          if (checkbox.classList.contains('custom-element')) {
            return;
          }
          
          // Find the original element data for objective
          const originalElement = category.elements.find(e => e.id === elementId);
          const objective = originalElement ? originalElement.objective : '';
          
          elementsAttributes.push({
            name: elementName,
            objective: objective,
            completed: checkbox.checked
          });
        });
        
        // Add any custom elements user added
        customElements.forEach(name => {
          elementsAttributes.push({
            name: name,
            objective: '',
            completed: true  // Custom elements that user added are considered "selected"
          });
        });
        
        return {
          name: category.name,
          color: category.color,
          percentage: calculatedPercentages[catId] || 0,
          elements_attributes: elementsAttributes
        };
      }).filter(Boolean)
    }
  };
  
  // Submit to server
  fetch('/pies', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'Accept': 'application/json',
      'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
    },
    body: JSON.stringify(pieData)
  })
  .then(response => {
    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }
    return response.json();
  })
  .then(data => {
    if (data.id) {
      window.location.href = `/pies/${data.id}`;
    } else {
      throw new Error('No pie ID returned: ' + JSON.stringify(data));
    }
  })
  .catch(error => {
    alert('Error saving pie. Please try again.');
    
    // Reset button state
    saveBtn.disabled = false;
    saveBtn.textContent = originalText;
  });
}

// Navigation functions
function goToStep(step) {
  // Hide all wizard steps
  const allSteps = document.querySelectorAll('.wizard-step');
  allSteps.forEach(stepEl => {
    stepEl.classList.remove('active');
  });
  
  // Show target step
  const targetStep = document.querySelector(`#step-${step}`);
  if (targetStep) {
    targetStep.classList.add('active');
  }
  
  // Update wizard state
  currentStep = step;
  
  // Initialize step-specific functionality
  switch(step) {
    case 1:
      initializeStep1();
      break;
    case 2:
      currentSubStep = 'categories';
      initializeStep2();
      break;
  }
  
  // Scroll to top
  window.scrollTo(0, 0);
}

function setupElementInteractions(elementsContainer, catId) {
  const checkboxes = elementsContainer.querySelectorAll('.element-checkbox');
  const deleteButtons = elementsContainer.querySelectorAll('.element-delete');
  const addBtn = elementsContainer.querySelector('.add-element-btn');
  const input = elementsContainer.querySelector('.custom-element-input');
  const category = availableCategories.find(c => c.id === catId);
  
  // Initialize selected elements array
  if (!wizardData.selectedElements[catId]) {
    wizardData.selectedElements[catId] = [];
  }
  
  // Initialize selectedElements based on currently checked checkboxes
  checkboxes.forEach(checkbox => {
    const elementId = parseInt(checkbox.value);
    if (checkbox.checked && !wizardData.selectedElements[catId].includes(elementId)) {
      wizardData.selectedElements[catId].push(elementId);
    }
  });
  
  // Set up element checkboxes
  checkboxes.forEach(checkbox => {
    checkbox.addEventListener('change', function() {
      const elementId = parseInt(this.value);
      
      if (this.checked) {
        if (!wizardData.selectedElements[catId].includes(elementId)) {
          wizardData.selectedElements[catId].push(elementId);
        }
      } else {
        wizardData.selectedElements[catId] = wizardData.selectedElements[catId].filter(id => id !== elementId);
      }
      
      // Update calculated percentage and all UI elements
      updateCalculatedPercentage(catId);
    });
  });
  
  // Set up delete buttons
  deleteButtons.forEach(deleteBtn => {
    deleteBtn.addEventListener('click', function(e) {
      e.stopPropagation();
      
      const elementId = parseInt(this.getAttribute('data-element-id'));
      const elementItem = this.closest('.element-item');
      
      // Remove from selected elements if selected
      if (wizardData.selectedElements[catId]) {
        wizardData.selectedElements[catId] = wizardData.selectedElements[catId].filter(id => id !== elementId);
      }
      
      // Smooth removal animation
      elementItem.classList.add('removing');
      setTimeout(() => {
        elementItem.remove();
        updateCalculatedPercentage(catId);
      }, 300);
    });
  });
  
  // Set up custom element addition
  addBtn.addEventListener('click', function() {
    const text = input.value.trim();
    if (text) {
      if (!wizardData.customElements[catId]) {
        wizardData.customElements[catId] = [];
      }
      wizardData.customElements[catId].push(text);
      input.value = '';
      
      // Clone template instead of creating HTML
      const template = document.getElementById('custom-element-template');
      const elementDiv = template.content.cloneNode(true).querySelector('.element-item');
      
      // Update the cloned template with actual data
      const checkbox = elementDiv.querySelector('.element-checkbox');
      const label = elementDiv.querySelector('.element-name');
      const deleteBtn = elementDiv.querySelector('.element-delete');
      
      checkbox.setAttribute('data-custom-text', text);
      label.textContent = text;
      deleteBtn.setAttribute('data-custom-element', text);
      deleteBtn.setAttribute('data-category-id', catId);
      
      // Add delete handler for custom element
      deleteBtn.addEventListener('click', function(e) {
        e.stopPropagation();
        const customText = this.getAttribute('data-custom-element');
        
        // Remove from custom elements array
        if (wizardData.customElements[catId]) {
          wizardData.customElements[catId] = wizardData.customElements[catId].filter(text => text !== customText);
        }
        
        elementDiv.classList.add('removing');
        setTimeout(() => {
          elementDiv.remove();
          updateCalculatedPercentage(catId);
        }, 300);
      });
      
      input.closest('.custom-element-form').before(elementDiv);
      updateCalculatedPercentage(catId);
    }
  });
  
  input.addEventListener('keypress', function(e) {
    if (e.key === 'Enter') {
      addBtn.click();
    }
  });
}

function updateCalculatedPercentage(catId) {
  const category = availableCategories.find(c => c.id === catId);
  if (!category) return;
  
  // Count all elements in the category (displayed elements only)
  const categoryItem = document.querySelector(`[data-category-id="${catId}"]`);
  const allElementCheckboxes = categoryItem.querySelectorAll('.element-checkbox');
  const checkedElementCheckboxes = categoryItem.querySelectorAll('.element-checkbox:checked');
  
  const totalElements = allElementCheckboxes.length;
  const checkedElements = checkedElementCheckboxes.length;
  
  if (totalElements === 0) return;
  
  const calculatedPercentage = Math.round((checkedElements / totalElements) * 100);
  wizardData.categoryProgress[catId] = calculatedPercentage;
  
  // Update all UI elements
  if (categoryItem) {
    // Update percentage display in the slice header
    const slicePercentage = categoryItem.querySelector('.slice-percentage');
    if (slicePercentage) {
      slicePercentage.textContent = calculatedPercentage + '%';
    }
    
    // Update progress slider if it exists and is visible
    const progressSlider = categoryItem.querySelector('.progress-slider');
    if (progressSlider) {
      progressSlider.value = calculatedPercentage;
      
      // Update slider track color to match the new value
      if (category) {
        progressSlider.style.background = `linear-gradient(to right, ${category.color} ${calculatedPercentage}%, #e9ecef ${calculatedPercentage}%)`;
      }
    }
    
    // Update any other percentage displays (for accordion headers, etc.)
    const progressBar = categoryItem.querySelector('.category-progress-bar');
    const percentageDisplay = categoryItem.querySelector('.category-percentage');
    
    if (progressBar) {
      progressBar.style.width = calculatedPercentage + '%';
    }
    if (percentageDisplay) {
      percentageDisplay.textContent = calculatedPercentage + '%';
    }
  }
}
</script>





