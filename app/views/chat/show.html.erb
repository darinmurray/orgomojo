<!DOCTYPE html>
<html>
  <head>
    <title>Health Conversation</title>
    <meta name="viewport" content="width=device-width,initial-scale=1">
    <%= csrf_meta_tags %>
    <%= csp_meta_tag %>
    
    <%= stylesheet_link_tag "application", "data-turbo-track": "reload" %>
    <%= javascript_importmap_tags %>
    
    <style>
      body {
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
        margin: 0;
        background: #f5f5f5;
      }
      
      .chat-container {
        max-width: 800px;
        margin: 0 auto;
        height: 100vh;
        display: flex;
        flex-direction: column;
        background: white;
        box-shadow: 0 0 20px rgba(0,0,0,0.1);
      }
      
      .chat-header {
        padding: 20px;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        text-align: center;
      }
      
      .chat-header h1 {
        margin: 0;
        font-size: 24px;
      }
      
      .progress-bar {
        background: rgba(255,255,255,0.3);
        height: 8px;
        border-radius: 4px;
        margin-top: 10px;
        overflow: hidden;
      }
      
      .progress-fill {
        background: white;
        height: 100%;
        border-radius: 4px;
        transition: width 0.5s ease;
      }
      
      .messages-container {
        flex: 1;
        overflow-y: auto;
        padding: 20px;
        scroll-behavior: smooth;
      }
      
      .message {
        margin-bottom: 16px;
        display: flex;
        align-items: flex-start;
      }
      
      .message.user {
        justify-content: flex-end;
      }
      
      .message-content {
        max-width: 70%;
        padding: 12px 16px;
        border-radius: 18px;
        line-height: 1.4;
      }
      
      .message.user .message-content {
        background: #007AFF;
        color: white;
        border-bottom-right-radius: 4px;
      }
      
      .message.assistant .message-content {
        background: #f1f1f1;
        color: #333;
        border-bottom-left-radius: 4px;
      }
      
      .message-audio {
        margin-top: 8px;
      }
      
      .audio-button {
        background: #007AFF;
        color: white;
        border: none;
        padding: 8px 12px;
        border-radius: 20px;
        cursor: pointer;
        font-size: 12px;
      }
      
      .audio-button:hover {
        background: #0056b3;
      }
      
      .input-container {
        padding: 20px;
        border-top: 1px solid #eee;
        background: white;
      }
      
      .input-form {
        display: flex;
        gap: 12px;
      }
      
      .message-input {
        flex: 1;
        padding: 12px 16px;
        border: 2px solid #ddd;
        border-radius: 25px;
        outline: none;
        font-size: 16px;
      }
      
      .message-input:focus {
        border-color: #007AFF;
      }
      
      .send-button {
        background: #007AFF;
        color: white;
        border: none;
        padding: 12px 20px;
        border-radius: 25px;
        cursor: pointer;
        font-weight: 600;
      }
      
      .send-button:hover {
        background: #0056b3;
      }
      
      .send-button:disabled {
        background: #ccc;
        cursor: not-allowed;
      }
      
      .typing-indicator {
        display: none;
        padding: 12px 16px;
        background: #f1f1f1;
        border-radius: 18px;
        border-bottom-left-radius: 4px;
        max-width: 70%;
        margin-bottom: 16px;
      }
      
      .typing-dots {
        display: inline-block;
      }
      
      .typing-dots span {
        display: inline-block;
        width: 8px;
        height: 8px;
        border-radius: 50%;
        background: #999;
        margin: 0 2px;
        animation: typing 1.4s infinite;
      }
      
      .typing-dots span:nth-child(2) {
        animation-delay: 0.2s;
      }
      
      .typing-dots span:nth-child(3) {
        animation-delay: 0.4s;
      }
      
      @keyframes typing {
        0%, 60%, 100% {
          transform: translateY(0);
        }
        30% {
          transform: translateY(-10px);
        }
      }
      
      .completion-message {
        text-align: center;
        padding: 20px;
        background: #e8f5e8;
        margin: 20px;
        border-radius: 12px;
        border: 2px solid #4CAF50;
      }
      
      .error-message {
        background: #fff3cd;
        border: 2px solid #ffc107;
        color: #856404;
        padding: 12px 16px;
        border-radius: 8px;
        margin: 10px 0;
        font-size: 14px;
        line-height: 1.4;
      }
      
      .error-message.severe {
        background: #f8d7da;
        border-color: #dc3545;
        color: #721c24;
      }
      
      .action-buttons {
        display: flex;
        gap: 12px;
        justify-content: center;
        margin-top: 12px;
      }
      
      .action-button {
        padding: 8px 16px;
        border: none;
        border-radius: 20px;
        cursor: pointer;
        font-weight: 600;
      }
      
      .action-button.primary {
        background: #4CAF50;
        color: white;
      }
      
      .action-button.secondary {
        background: #f1f1f1;
        color: #333;
      }
    </style>
  </head>

  <body>
    <div class="chat-container">
      <div class="chat-header">
        <h1>Health & Wellness Coach</h1>
        <div class="progress-bar">
          <div class="progress-fill" id="progress-fill" style="width: <%= @completion_percentage %>%;"></div>
        </div>
        <div style="margin-top: 8px; font-size: 14px;">
          Progress: <span id="progress-text"><%= @completion_percentage %>%</span>
        </div>
      </div>
      
      <div class="messages-container" id="messages-container">
        <% @chat_messages.each do |message| %>
          <div class="message <%= message.role %>">
            <div class="message-content">
              <%= simple_format(message.content) %>
              <% if message.has_audio? %>
                <div class="message-audio">
                  <button class="audio-button" onclick="playAudio('<%= message.audio_url %>')">
                    🔊 Play Audio
                  </button>
                </div>
              <% end %>
            </div>
          </div>
        <% end %>
        
        <div class="typing-indicator" id="typing-indicator">
          <div class="typing-dots">
            <span></span>
            <span></span>
            <span></span>
          </div>
        </div>
      </div>
      
      <div class="input-container">
        <form class="input-form" id="message-form">
          <input 
            type="text" 
            class="message-input" 
            id="message-input" 
            placeholder="Share your health goals and current situation..."
            autocomplete="off"
            maxlength="500"
          >
          <button type="submit" class="send-button" id="send-button">Send</button>
        </form>
      </div>
    </div>

    <audio id="message-audio" style="display: none;"></audio>

    <script>
      const chatSessionId = <%= @chat_session.id %>;
      const messagesContainer = document.getElementById('messages-container');
      const messageForm = document.getElementById('message-form');
      const messageInput = document.getElementById('message-input');
      const sendButton = document.getElementById('send-button');
      const typingIndicator = document.getElementById('typing-indicator');
      const progressFill = document.getElementById('progress-fill');
      const progressText = document.getElementById('progress-text');
      const messageAudio = document.getElementById('message-audio');
      
      let isWaitingForResponse = false;

      messageForm.addEventListener('submit', async (e) => {
        e.preventDefault();
        await sendMessage();
      });

      messageInput.addEventListener('keypress', (e) => {
        if (e.key === 'Enter' && !e.shiftKey) {
          e.preventDefault();
          sendMessage();
        }
      });

      async function sendMessage() {
        const message = messageInput.value.trim();
        if (!message || isWaitingForResponse) return;

        isWaitingForResponse = true;
        sendButton.disabled = true;
        
        // Add user message to UI immediately
        addMessageToUI('user', message);
        messageInput.value = '';
        
        // Show typing indicator
        showTypingIndicator();

        try {
          const response = await fetch(`/chat/${chatSessionId}/send_message`, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
              'X-CSRF-Token': document.querySelector('[name="csrf-token"]').content
            },
            body: JSON.stringify({ message: message })
          });

          const data = await response.json();
          
          hideTypingIndicator();

          if (data.success) {
            // Add assistant response
            addMessageToUI('assistant', data.assistant_message.content, data.assistant_message.audio_url);
            
            // Update progress
            updateProgress(data.completion_status);
            
            // Check if conversation is completed
            if (data.session_completed) {
              showCompletionMessage();
            }
          } else {
            // Handle specific error types with appropriate styling and messaging
            const errorMessage = data.error || 'Sorry, something went wrong.';
            const isQuotaError = errorMessage.toLowerCase().includes('quota') || 
                               errorMessage.toLowerCase().includes('usage') ||
                               errorMessage.toLowerCase().includes('catch up');
            
            addErrorMessage(errorMessage, isQuotaError);
          }
        } catch (error) {
          hideTypingIndicator();
          addErrorMessage('Sorry, there was a connection error. Please check your internet connection and try again.', false);
          console.error('Error:', error);
        } finally {
          isWaitingForResponse = false;
          sendButton.disabled = false;
          messageInput.focus();
        }
      }

      function addMessageToUI(role, content, audioUrl = null) {
        const messageDiv = document.createElement('div');
        messageDiv.className = `message ${role}`;
        
        const contentDiv = document.createElement('div');
        contentDiv.className = 'message-content';
        contentDiv.innerHTML = content.replace(/\n/g, '<br>');
        
        if (audioUrl) {
          const audioDiv = document.createElement('div');
          audioDiv.className = 'message-audio';
          audioDiv.innerHTML = `
            <button class="audio-button" onclick="playAudio('${audioUrl}')">
              🔊 Play Audio
            </button>
          `;
          contentDiv.appendChild(audioDiv);
        }
        
        messageDiv.appendChild(contentDiv);
        messagesContainer.appendChild(messageDiv);
        scrollToBottom();
      }

      function addErrorMessage(errorText, isQuotaError = false) {
        const errorDiv = document.createElement('div');
        errorDiv.className = `error-message ${isQuotaError ? 'severe' : ''}`;
        
        if (isQuotaError) {
          errorDiv.innerHTML = `
            <strong>⚠️ Service Temporarily Limited</strong><br>
            ${errorText}<br>
            <small>💡 Tip: The free tier has daily limits. Your conversation is saved and you can continue anytime!</small>
          `;
        } else {
          errorDiv.innerHTML = `
            <strong>⚠️ Connection Issue</strong><br>
            ${errorText}
          `;
        }
        
        messagesContainer.appendChild(errorDiv);
        scrollToBottom();
      }

      function showTypingIndicator() {
        typingIndicator.style.display = 'block';
        scrollToBottom();
      }

      function hideTypingIndicator() {
        typingIndicator.style.display = 'none';
      }

      function scrollToBottom() {
        messagesContainer.scrollTop = messagesContainer.scrollHeight;
      }

      function updateProgress(percentage) {
        progressFill.style.width = percentage + '%';
        progressText.textContent = percentage + '%';
      }

      function playAudio(audioUrl) {
        if (audioUrl) {
          messageAudio.src = audioUrl;
          messageAudio.play().catch(error => {
            console.error('Error playing audio:', error);
          });
        }
      }

      function showCompletionMessage() {
        const completionDiv = document.createElement('div');
        completionDiv.className = 'completion-message';
        completionDiv.innerHTML = `
          <h3>🎉 Conversation Complete!</h3>
          <p>Great job! I've gathered enough information to create your personalized action plan.</p>
          <div class="action-buttons">
            <button class="action-button primary" onclick="viewActionPlan()">View Action Plan</button>
            <button class="action-button secondary" onclick="exportData()">Export Data</button>
            <button class="action-button secondary" onclick="startNewSession()">Start New Session</button>
          </div>
        `;
        messagesContainer.appendChild(completionDiv);
        scrollToBottom();
      }

      async function viewActionPlan() {
        try {
          const response = await fetch(`/chat/${chatSessionId}/action_plan`);
          const data = await response.json();
          
          if (data.action_plan) {
            addMessageToUI('assistant', data.action_plan);
          }
        } catch (error) {
          console.error('Error fetching action plan:', error);
        }
      }

      function exportData() {
        window.open(`/chat/${chatSessionId}/export_data.json`, '_blank');
      }

      async function startNewSession() {
        try {
          const response = await fetch('/chat/new_session', { method: 'POST' });
          const data = await response.json();
          
          if (data.success) {
            window.location.href = data.redirect_url;
          }
        } catch (error) {
          console.error('Error starting new session:', error);
        }
      }

      // Focus on input when page loads
      messageInput.focus();
    </script>
  </body>
</html>
